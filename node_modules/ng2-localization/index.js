import { EventEmitter, Inject, Injectable, InjectionToken, NgModule, Pipe } from '@angular/core';
import { CommonModule } from '@angular/common';

/**
 * Created by ali on 5/11/17.
 */
var DICTIONARY = new InjectionToken('dictionary');

/**
 * Created by ali on 5/11/17.
 */
var TranslateService = (function () {
    /**
     * @param {?} _translations
     */
    function TranslateService(_translations) {
        this._translations = _translations;
        this.onLocalChanged = new EventEmitter();
        this.PLACEHOLDER = '%';
    }
    /**
     * @return {?}
     */
    TranslateService.prototype.getCurrentLocal = function () {
        return this._currentLocal || this._defaultLocal;
    };
    /**
     * @return {?}
     */
    TranslateService.prototype.getSupportedLocal = function () {
        return Object.keys(this._translations);
    };
    /**
     * @param {?} local
     * @return {?}
     */
    TranslateService.prototype.setDefaultLocal = function (local) {
        this._defaultLocal = local; // set default Local
    };
    /**
     * @param {?} enable
     * @return {?}
     */
    TranslateService.prototype.enableFallback = function (enable) {
        this._fallback = enable; // enable or disable fallback Local
    };
    /**
     * @param {?} local
     * @return {?}
     */
    TranslateService.prototype.use = function (local) {
        // set current language
        this._currentLocal = local;
        this.onLocalChanged.emit(local); // publish language change.
    };
    /**
     * @param {?} key
     * @return {?}
     */
    TranslateService.prototype.translate = function (key) {
        // private perform translation
        var /** @type {?} */ translation = key;
        if (this._translations[this._currentLocal] && this._translations[this._currentLocal][key]) {
            return translation = this._translations[this._currentLocal][key]; // if found in currentLocal
        }
        // fallback disabled
        if (!this._fallback) {
            return translation;
        }
        // found in default language
        if (this._translations[this._defaultLocal] && this._translations[this._defaultLocal][this._translations[key]]) {
            return this._translations[this._defaultLocal][this._translations[key]];
        }
        return translation;
    };
    /**
     * @param {?} key
     * @param {?=} words
     * @return {?}
     */
    TranslateService.prototype.instant = function (key, words) {
        // call translation
        var /** @type {?} */ translation = this.translate(key);
        if (!words) {
            return translation;
        }
        return this.replace(translation, words);
    };
    /**
     * @param {?=} word
     * @param {?=} words
     * @return {?}
     */
    TranslateService.prototype.replace = function (word, words) {
        if (word === void 0) { word = ''; }
        if (words === void 0) { words = ''; }
        var /** @type {?} */ translation = word;
        var /** @type {?} */ values = [].concat(words);
        values.forEach(function (e, i) {
            translation = translation.replace('{'.concat(i.toString()).concat('}'), e);
        });
        return translation;
    };
    return TranslateService;
}());
TranslateService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
TranslateService.ctorParameters = function () { return [
    { type: undefined, decorators: [{ type: Inject, args: [DICTIONARY,] },] },
]; };

/**
 * Created by ali on 5/11/17.
 */
var TranslatePipe = (function () {
    /**
     * @param {?} _translate
     */
    function TranslatePipe(_translate) {
        this._translate = _translate;
    }
    /**
     * @param {?} value
     * @param {?} args
     * @return {?}
     */
    TranslatePipe.prototype.transform = function (value, args) {
        if (!value) {
            return;
        }
        return this._translate.instant(value, args);
    };
    return TranslatePipe;
}());
TranslatePipe.decorators = [
    { type: Pipe, args: [{
                name: 'translate',
                pure: false // add in this line, update value when we change language
            },] },
];
/**
 * @nocollapse
 */
TranslatePipe.ctorParameters = function () { return [
    { type: TranslateService, },
]; };

var Locals = {
    'en': { code: 'en', englishName: 'English', localName: 'English' },
    'fa': { code: 'fa', englishName: 'Persian', localName: 'فارسی' },
    'ar': { code: 'ar', englishName: 'Arabic', localName: 'العربیة' },
};
var LOCAL_CODES = {
    LANG_ENGLISH_CODE: 'en',
    LANG_PERSIAN_CODE: 'fa',
    LANG_ARABIC_CODE: 'ar'
};
var RtlLocals = ['ar', 'arc', 'dv', 'fa', 'ha', 'he', 'khw', 'ks', 'ku', 'ps', 'ur', 'yi'];

/**
 * Created by ali on 5/12/17.
 */
var LocalService = (function () {
    function LocalService() {
    }
    /**
     * @param {?} local
     * @return {?}
     */
    LocalService.prototype.isRtl = function (local) {
        return RtlLocals.indexOf(local) > -1;
    };
    /**
     * @return {?}
     */
    LocalService.prototype.getLocals = function () {
        return Locals;
    };
    /**
     * @param {?} local
     * @return {?}
     */
    LocalService.prototype.getLocal = function (local) {
        return Locals[local];
    };
    return LocalService;
}());
LocalService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
LocalService.ctorParameters = function () { return []; };

var TranslationModule = (function () {
    function TranslationModule() {
    }
    /**
     * @return {?}
     */
    TranslationModule.forRoot = function () {
        return {
            ngModule: TranslationModule,
            providers: [TranslateService]
        };
    };
    return TranslationModule;
}());
TranslationModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [TranslatePipe],
                exports: [TranslatePipe]
            },] },
];
/**
 * @nocollapse
 */
TranslationModule.ctorParameters = function () { return []; };
var LocalModule = (function () {
    function LocalModule() {
    }
    /**
     * @return {?}
     */
    LocalModule.forRoot = function () {
        return {
            ngModule: LocalModule,
            providers: [LocalService]
        };
    };
    return LocalModule;
}());
LocalModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ]
            },] },
];
/**
 * @nocollapse
 */
LocalModule.ctorParameters = function () { return []; };

export { TranslationModule, LocalModule, DICTIONARY, TranslateService, TranslatePipe, LOCAL_CODES, LocalService };
